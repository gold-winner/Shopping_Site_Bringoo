'use strict';let ids = [];const FS = require('fs'),  PATH = require('path'),  SVGO = require('svgo'),  filepath = PATH.resolve(__dirname, '../../src/assets/icons'),  svgoConfig = {    plugins: [      {        name: 'cleanupAttrs',      },      {        name: 'removeDoctype',      },      {        name: 'removeXMLProcInst',      },      {        name: 'removeComments',      },      {        name: 'removeMetadata',      },      {        name: 'removeTitle',      },      {        name: 'removeDesc',      },      {        name: 'removeUselessDefs',      },      {        name: 'removeEditorsNSData',      },      {        name: 'removeEmptyAttrs',      },      {        name: 'removeHiddenElems',      },      {        name: 'removeEmptyText',      },      {        name: 'removeEmptyContainers',      },      {        name: 'removeViewBox',      },      {        name: 'cleanupEnableBackground',      },      {        name: 'convertStyleToAttrs',      },      {        name: 'convertColors',      },      {        name: 'convertPathData',      },      {        name: 'convertTransform',      },      {        name: 'removeUnknownsAndDefaults',      },      {        name: 'removeNonInheritableGroupAttrs',      },      {        name: 'removeUselessStrokeAndFill',      },      {        name: 'removeUnusedNS',      },      {        name: 'cleanupIDs',      },      {        name: 'cleanupNumericValues',      },      {        name: 'moveElemsAttrsToGroup',      },      {        name: 'moveGroupAttrsToElems',      },      {        name: 'collapseGroups',      },      {        name: 'removeRasterImages',      },      {        name: 'mergePaths',      },      {        name: 'convertShapeToPath',      },      {        name: 'sortAttrs',      },      {        name: 'removeDimensions',      },      {        name: 'removeAttrs',        params: { attrs: '(width|height|stroke|fill)' }      },    ],  }async function optimizeSvg(data, fileName) {  //const svg = await outlineStroke(data);  const result = await SVGO.optimize(data, svgoConfig);  const id = fileName    .replace(/([a-z])([A-Z])/g, '$1-$2')    .replace(/[\s_]+/g, '-')    .toLowerCase()    .replace(/\.[^.]+$/, '');  ids = [...ids, `'${id}'`];  return result.data    .replace(/xmlns="\S+"/g, '')    .replace(/ +/g, ' ')    .replace(/<svg/g, `<symbol id="${id}"`)    .replace(/<\/svg/g, '<symbol');}async function getSymbol(filepath, fileName) {  const data = FS.readFileSync(`${filepath}/${fileName}`, 'utf8');  const symbol = await optimizeSvg(data, fileName);  return symbol;}async function getSymbols(filepath) {  return Promise.all(FS.readdirSync(filepath).map((fileName) => getSymbol(filepath, fileName)));}const spritePath = PATH.resolve(__dirname, '../../src/assets/symbol-defs.svg');const typePath = PATH.resolve(__dirname, '../../src/shared/components/icon/icon.type.ts');let defs = `<svg aria-hidden="true" style="position: absolute; width: 0; height: 0; overflow: hidden;" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><defs>`;getSymbols(filepath).then((s) => {  defs += `${s.join('\n')}</defs></svg>`;  FS.writeFile(spritePath, defs, function (err) {    if (err) {      return console.log(err);    }    console.log('√ Icon sprite successfully created!');  });  const typeContent = `export type iconType = ${ids.join(' | ')};\n`;  FS.writeFile(typePath, typeContent, function (err) {    if (err) {      return console.log(err);    }    console.log('√ Icon types successfully created!');  });});